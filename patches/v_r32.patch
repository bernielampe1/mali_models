diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/Kbuild b/driver/product/kernel/drivers/gpu/arm/midgard/Kbuild
index c520597..c3a470e 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/Kbuild
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/Kbuild
@@ -135,7 +135,8 @@ ccflags-y += \
     -I$(src) \
     -I$(src)/platform/$(MALI_PLATFORM_DIR) \
     -I$(src)/../../../base \
-    -I$(src)/../../../../include
+    -I$(src)/../../../../include \
+    -I$(src)/../../../../include/uapi
 
 subdir-ccflags-y += $(ccflags-y)
 
@@ -180,7 +181,8 @@ mali_kbase-y := \
     mali_kbase_regs_history_debugfs.o \
     mali_kbase_dvfs_debugfs.o \
     mali_power_gpu_frequency_trace.o \
-    mali_kbase_trace_gpu_mem.o
+    mali_kbase_trace_gpu_mem.o \
+    mali_kbase_platform_fake.o
 
 mali_kbase-$(CONFIG_MALI_CINSTR_GWT) += mali_kbase_gwt.o
 
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/Makefile b/driver/product/kernel/drivers/gpu/arm/midgard/Makefile
index 4384e80..402cde2 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/Makefile
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/Makefile
@@ -1,6 +1,6 @@
 # SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
 #
-# (C) COPYRIGHT 2010-2021 ARM Limited. All rights reserved.
+# (C) COPYRIGHT 2010-2023 ARM Limited. All rights reserved.
 #
 # This program is free software and is provided to you under the terms of the
 # GNU General Public License version 2 as published by the Free Software
@@ -16,155 +16,41 @@
 # along with this program; if not, you can access it online at
 # http://www.gnu.org/licenses/gpl-2.0.html.
 #
-#
 
 KERNEL_SRC ?= /lib/modules/$(shell uname -r)/build
 KDIR ?= $(KERNEL_SRC)
+M ?= $(shell pwd)
 
 ifeq ($(KDIR),)
     $(error Must specify KDIR to point to the kernel to target))
 endif
 
-#
-# Default configuration values
-#
-# Dependency resolution is done through statements as Kconfig
-# is not supported for out-of-tree builds.
-#
-
-CONFIG_MALI_MIDGARD ?= m
-ifeq ($(CONFIG_MALI_MIDGARD),m)
-    CONFIG_MALI_GATOR_SUPPORT ?= y
-    CONFIG_MALI_ARBITRATION ?= n
-    CONFIG_MALI_PARTITION_MANAGER ?= n
-
-    ifneq ($(CONFIG_MALI_NO_MALI),y)
-        # Prevent misuse when CONFIG_MALI_NO_MALI=y
-        CONFIG_MALI_REAL_HW ?= y
-    endif
-
-    ifeq ($(CONFIG_MALI_MIDGARD_DVFS),y)
-        # Prevent misuse when CONFIG_MALI_MIDGARD_DVFS=y
-        CONFIG_MALI_DEVFREQ ?= n
-    else
-        CONFIG_MALI_DEVFREQ ?= y
-    endif
-
-    ifeq ($(CONFIG_MALI_DMA_BUF_MAP_ON_DEMAND), y)
-        # Prevent misuse when CONFIG_MALI_DMA_BUF_MAP_ON_DEMAND=y
-        CONFIG_MALI_DMA_BUF_LEGACY_COMPAT = n
-    endif
-
-    ifeq ($(CONFIG_BSP_HAS_HYPERVISOR),y)
-        ifneq ($(CONFIG_MALI_ARBITRATION), n)
-            CONFIG_MALI_XEN ?= m
-        endif
-    endif
-
-    #
-    # Expert/Debug/Test released configurations
-    #
-    ifeq ($(CONFIG_MALI_EXPERT), y)
-        ifeq ($(CONFIG_MALI_NO_MALI), y)
-            CONFIG_MALI_REAL_HW = n
-        else
-            # Prevent misuse when CONFIG_MALI_NO_MALI=n
-            CONFIG_MALI_REAL_HW = y
-            CONFIG_MALI_ERROR_INJECT = n
-        endif
-
-        ifeq ($(CONFIG_MALI_HW_ERRATA_1485982_NOT_AFFECTED), y)
-            # Prevent misuse when CONFIG_MALI_HW_ERRATA_1485982_NOT_AFFECTED=y
-            CONFIG_MALI_HW_ERRATA_1485982_USE_CLOCK_ALTERNATIVE = n
-        endif
-
-        ifeq ($(CONFIG_MALI_DEBUG), y)
-            CONFIG_MALI_MIDGARD_ENABLE_TRACE ?= y
-            CONFIG_MALI_SYSTEM_TRACE ?= y
-
-            ifeq ($(CONFIG_SYNC), y)
-                CONFIG_MALI_FENCE_DEBUG ?= y
-            else
-                ifeq ($(CONFIG_SYNC_FILE), y)
-                    CONFIG_MALI_FENCE_DEBUG ?= y
-                else
-                    CONFIG_MALI_FENCE_DEBUG = n
-                endif
-            endif
-        else
-            # Prevent misuse when CONFIG_MALI_DEBUG=n
-            CONFIG_MALI_MIDGARD_ENABLE_TRACE = n
-            CONFIG_MALI_SYSTEM_TRACE = n
-            CONFIG_MALI_FENCE_DEBUG = n
-        endif
-    else
-        # Prevent misuse when CONFIG_MALI_EXPERT=n
-        CONFIG_MALI_CORESTACK = n
-        CONFIG_MALI_2MB_ALLOC = n
-        CONFIG_MALI_PWRSOFT_765 = n
-        CONFIG_MALI_MEMORY_FULLY_BACKED = n
-        CONFIG_MALI_JOB_DUMP = n
-        CONFIG_MALI_NO_MALI = n
-        CONFIG_MALI_REAL_HW = y
-        CONFIG_MALI_ERROR_INJECT = n
-        CONFIG_MALI_HW_ERRATA_1485982_NOT_AFFECTED = n
-        CONFIG_MALI_HW_ERRATA_1485982_USE_CLOCK_ALTERNATIVE = n
-        CONFIG_MALI_PRFCNT_SET_SELECT_VIA_DEBUG_FS = n
-        CONFIG_MALI_DEBUG = n
-        CONFIG_MALI_MIDGARD_ENABLE_TRACE = n
-        CONFIG_MALI_SYSTEM_TRACE = n
-        CONFIG_MALI_FENCE_DEBUG = n
-    endif
-
-    ifeq ($(CONFIG_MALI_DEBUG), y)
-        CONFIG_MALI_KUTF ?= y
-        ifeq ($(CONFIG_MALI_KUTF), y)
-            CONFIG_MALI_KUTF_IRQ_TEST ?= y
-            CONFIG_MALI_KUTF_CLK_RATE_TRACE ?= y
-        else
-            # Prevent misuse when CONFIG_MALI_KUTF=n
-            CONFIG_MALI_KUTF_IRQ_TEST = n
-            CONFIG_MALI_KUTF_CLK_RATE_TRACE = n
-        endif
-    else
-        # Prevent misuse when CONFIG_MALI_DEBUG=n
-        CONFIG_MALI_KUTF = n
-        CONFIG_MALI_KUTF_IRQ_TEST = n
-        CONFIG_MALI_KUTF_CLK_RATE_TRACE = n
-    endif
-else
-    # Prevent misuse when CONFIG_MALI_MIDGARD=n
-    CONFIG_MALI_ARBITRATION = n
-    CONFIG_MALI_KUTF = n
-    CONFIG_MALI_KUTF_IRQ_TEST = n
-    CONFIG_MALI_KUTF_CLK_RATE_TRACE = n
-endif
+CONFIG_MALI_MIDGARD=m
+CONFIG_MALI_DDK_VERSION=y
+CONFIG_MALI_PLATFORM_NAME="devicetree"
+CONFIG_MALI_EXPERT=y
+CONFIG_MALI_DEBUG=y
+CONFIG_MALI_NO_MALI=y
 
 # All Mali CONFIG should be listed here
-CONFIGS := \
+CONFIGS += \
+    CONFIG_MALI_DDK_VERSION \
     CONFIG_MALI_MIDGARD \
-    CONFIG_MALI_CSF_SUPPORT \
     CONFIG_MALI_GATOR_SUPPORT \
-    CONFIG_MALI_DMA_FENCE \
     CONFIG_MALI_ARBITER_SUPPORT \
     CONFIG_MALI_ARBITRATION \
     CONFIG_MALI_PARTITION_MANAGER \
     CONFIG_MALI_REAL_HW \
-    CONFIG_MALI_GEM5_BUILD \
     CONFIG_MALI_DEVFREQ \
     CONFIG_MALI_MIDGARD_DVFS \
     CONFIG_MALI_DMA_BUF_MAP_ON_DEMAND \
     CONFIG_MALI_DMA_BUF_LEGACY_COMPAT \
     CONFIG_MALI_EXPERT \
     CONFIG_MALI_CORESTACK \
-    CONFIG_MALI_2MB_ALLOC \
-    CONFIG_MALI_PWRSOFT_765 \
-    CONFIG_MALI_MEMORY_FULLY_BACKED \
+    CONFIG_LARGE_PAGE_SUPPORT \
     CONFIG_MALI_JOB_DUMP \
     CONFIG_MALI_NO_MALI \
     CONFIG_MALI_ERROR_INJECT \
-    CONFIG_MALI_HW_ERRATA_1485982_NOT_AFFECTED \
-    CONFIG_MALI_HW_ERRATA_1485982_USE_CLOCK_ALTERNATIVE \
     CONFIG_MALI_PRFCNT_SET_PRIMARY \
     CONFIG_MALI_PRFCNT_SET_SECONDARY \
     CONFIG_MALI_PRFCNT_SET_TERTIARY \
@@ -173,13 +59,16 @@ CONFIGS := \
     CONFIG_MALI_MIDGARD_ENABLE_TRACE \
     CONFIG_MALI_SYSTEM_TRACE \
     CONFIG_MALI_FENCE_DEBUG \
+    CONFIG_MALI_2MB_ALLOC \
+    CONFIG_MALI_PWRSOFT_765 \
+    CONFIG_MALI_PRFCNT_SET_SECONDARY \
     CONFIG_MALI_KUTF \
-    CONFIG_MALI_KUTF_IRQ_TEST \
-    CONFIG_MALI_KUTF_CLK_RATE_TRACE \
-    CONFIG_MALI_XEN
+    CONFIG_MALI_DMA_FENCE \
+    CONFIG_MALI_CSF_SUPPORT \
+    CONFIG_MALI_MEMORY_FULLY_BACKED \
+    CONFIG_MALI_GEM5_BUILD
 
 
-#
 # MAKE_ARGS to pass the custom CONFIGs on out-of-tree build
 #
 # Generate the list of CONFIGs and values.
@@ -191,6 +80,10 @@ MAKE_ARGS := $(foreach config,$(CONFIGS), \
                         $(value config)=$(value $(value config)), \
                         $(value config)=n))
 
+ifeq ($(MALI_KCONFIG_EXT_PREFIX),)
+    MAKE_ARGS += CONFIG_MALI_PLATFORM_NAME=$(CONFIG_MALI_PLATFORM_NAME)
+endif
+
 #
 # EXTRA_CFLAGS to define the custom CONFIGs on out-of-tree build
 #
@@ -201,15 +94,67 @@ EXTRA_CFLAGS := $(foreach config,$(CONFIGS), \
                     $(if $(filter y m,$(value $(value config))), \
                         -D$(value config)=1))
 
-#
-# KBUILD_EXTRA_SYMBOLS to prevent warnings about unknown functions
-#
+ifeq ($(MALI_KCONFIG_EXT_PREFIX),)
+    EXTRA_CFLAGS += -DCONFIG_MALI_PLATFORM_NAME='\"$(CONFIG_MALI_PLATFORM_NAME)\"'
+    EXTRA_CFLAGS += -DCONFIG_MALI_NO_MALI_DEFAULT_GPU='\"$(CONFIG_MALI_NO_MALI_DEFAULT_GPU)\"'
+endif
 
-all:
-	$(MAKE) -C $(KDIR) M=$(CURDIR) $(MAKE_ARGS) EXTRA_CFLAGS="$(EXTRA_CFLAGS)" KBUILD_EXTRA_SYMBOLS="$(EXTRA_SYMBOLS)" modules
+CFLAGS_MODULE += -Wall -Werror
+
+# The following were added to align with W=1 in scripts/Makefile.extrawarn
+# from the Linux source tree (v5.18.14)
+CFLAGS_MODULE += -Wextra -Wunused -Wno-unused-parameter
+CFLAGS_MODULE += -Wmissing-declarations
+CFLAGS_MODULE += -Wmissing-format-attribute
+CFLAGS_MODULE += -Wmissing-prototypes
+CFLAGS_MODULE += -Wold-style-definition
+# The -Wmissing-include-dirs cannot be enabled as the path to some of the
+# included directories change depending on whether it is an in-tree or
+# out-of-tree build.
+CFLAGS_MODULE += $(call cc-option, -Wunused-but-set-variable)
+CFLAGS_MODULE += $(call cc-option, -Wunused-const-variable)
+CFLAGS_MODULE += $(call cc-option, -Wpacked-not-aligned)
+CFLAGS_MODULE += $(call cc-option, -Wstringop-truncation)
+# The following turn off the warnings enabled by -Wextra
+CFLAGS_MODULE += -Wno-sign-compare
+CFLAGS_MODULE += -Wno-shift-negative-value
+# This flag is needed to avoid build errors on older kernels
+CFLAGS_MODULE += $(call cc-option, -Wno-cast-function-type)
+
+KBUILD_CPPFLAGS += -DKBUILD_EXTRA_WARN1
+
+# The following were added to align with W=2 in scripts/Makefile.extrawarn
+# from the Linux source tree (v5.18.14)
+CFLAGS_MODULE += -Wdisabled-optimization
+# The -Wshadow flag cannot be enabled unless upstream kernels are
+# patched to fix redefinitions of certain built-in functions and
+# global variables.
+CFLAGS_MODULE += $(call cc-option, -Wlogical-op)
+CFLAGS_MODULE += -Wmissing-field-initializers
+# -Wtype-limits must be disabled due to build failures on kernel 5.x
+CFLAGS_MODULE += -Wno-type-limits
+CFLAGS_MODULE += $(call cc-option, -Wmaybe-uninitialized)
+CFLAGS_MODULE += $(call cc-option, -Wunused-macros)
+
+KBUILD_CPPFLAGS += -DKBUILD_EXTRA_WARN2
+
+# This warning is disabled to avoid build failures in some kernel versions
+CFLAGS_MODULE += -Wno-ignored-qualifiers
+
+ifeq ($(CONFIG_GCOV_KERNEL),y)
+    CFLAGS_MODULE += $(call cc-option, -ftest-coverage)
+    CFLAGS_MODULE += $(call cc-option, -fprofile-arcs)
+    EXTRA_CFLAGS += -DGCOV_PROFILE=1
+endif
 
-modules_install:
-	$(MAKE) -C $(KDIR) M=$(CURDIR) $(MAKE_ARGS) modules_install
+ifeq ($(CONFIG_MALI_KCOV),y)
+    CFLAGS_MODULE += $(call cc-option, -fsanitize-coverage=trace-cmp)
+    EXTRA_CFLAGS += -DKCOV=1
+    EXTRA_CFLAGS += -DKCOV_ENABLE_COMPARISONS=1
+endif
+
+all:
+	$(MAKE) -C $(KDIR) M=$(M) $(MAKE_ARGS) EXTRA_CFLAGS="$(EXTRA_CFLAGS)" KBUILD_EXTRA_SYMBOLS="$(EXTRA_SYMBOLS)" modules
 
 clean:
-	$(MAKE) -C $(KDIR) M=$(CURDIR) $(MAKE_ARGS) clean
+	$(MAKE) -C $(KDIR) M=$(M) $(MAKE_ARGS) clean
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/Kbuild b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/Kbuild
index 5dbcff3..7438874 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/Kbuild
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/Kbuild
@@ -32,7 +32,8 @@ mali_kbase-y += \
     backend/gpu/mali_kbase_pm_policy.o \
     backend/gpu/mali_kbase_time.o \
     backend/gpu/mali_kbase_l2_mmu_config.o \
-    backend/gpu/mali_kbase_clk_rate_trace_mgr.o
+    backend/gpu/mali_kbase_clk_rate_trace_mgr.o \
+    backend/gpu/mali_kbase_model_dummy.o
 
 ifeq ($(MALI_USE_CSF),0)
     mali_kbase-y += \
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_jm_hw.c b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_jm_hw.c
index ae0377f..7b90c58 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_jm_hw.c
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_jm_hw.c
@@ -1081,7 +1081,7 @@ static void kbase_debug_dump_registers(struct kbase_device *kbdev)
 {
 	int i;
 
-	kbase_io_history_dump(kbdev);
+	//kbase_io_history_dump(kbdev);
 
 	dev_err(kbdev->dev, "Register state:");
 	dev_err(kbdev->dev, "  GPU_IRQ_RAWSTAT=0x%08x GPU_STATUS=0x%08x",
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_model_dummy.c b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_model_dummy.c
new file mode 100644
index 0000000..27c820f
--- /dev/null
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_model_dummy.c
@@ -0,0 +1,149 @@
+#ifndef KBASE_MODEL_DUMMY_H_
+#define KBASE_MODEL_DUMMY_H_
+
+#include<mali_kbase.h>
+
+#include<gpu/arm/midgard/gpu/mali_kbase_gpu_regmap.h>
+#include<gpu/arm/midgard/gpu/mali_kbase_gpu_id.h>
+
+// Taken from https://github.com/ARM-software/nomali-model
+// interrupts (JOB, MMU, and GPU) not modeled, look in boot/dts/exynos/exynos9830.dts
+
+#define REGISTER_SPACE_SIZE_DTS 0x5000
+static u32 dummy_regs[REGISTER_SPACE_SIZE_DTS]; // size taken from dts file boot/dts/exynos/exynos9830.dts
+
+void clear_gpu(void) {
+    // dummy clear
+    int i = 0;
+    while(i < REGISTER_SPACE_SIZE_DTS) {
+        dummy_regs[i++] = 0;
+    }
+}
+
+// Register mapping comes from mali_midg_regmap.h and mali_midg_regmap_jm.h
+
+int kbase_gpu_device_create(struct kbase_device *kbdev) {
+    clear_gpu();
+
+    // gpu id is used to find hw issues and workaround functions
+    // look as mali_kbase_hw.c: kbase_hw_get_issues_for_new_id() for hardcoded arch/product/verions
+    dummy_regs[GPU_CONTROL_REG(GPU_ID)] = GPU_ID2_MAKE(6, 0, 0, 0, 0, 1, 0);
+
+    dummy_regs[GPU_CONTROL_REG(L2_FEATURES)] =
+        (0x07 << 24) |  // lg2 ext bus width
+        (0x13 << 16) |  // lg2 cache size
+        (0x02 << 8) |   // lg2 associativity
+        (0x06);         // lg2 line size
+
+    dummy_regs[GPU_CONTROL_REG(TILER_FEATURES)] =
+        (0x8 << 8) |    // Maximum no active hierarchy levels
+        0x09;           // lg2 bin size
+
+    /* Coherent core group, but incoherent supergroup. 1 L2 slice. */
+    dummy_regs[GPU_CONTROL_REG(MEM_FEATURES)] = 0x1;
+
+    dummy_regs[GPU_CONTROL_REG(MMU_FEATURES)] = 0x2830;
+    dummy_regs[GPU_CONTROL_REG(AS_PRESENT)] = 0xff;
+    dummy_regs[GPU_CONTROL_REG(JS_PRESENT)] = 0x7;
+    dummy_regs[GPU_CONTROL_REG(JS0_FEATURES)] = 0x20e;
+    dummy_regs[GPU_CONTROL_REG(JS1_FEATURES)] = 0x1fe;
+    dummy_regs[GPU_CONTROL_REG(JS2_FEATURES)] = 0x7e;
+
+    dummy_regs[GPU_CONTROL_REG(TEXTURE_FEATURES_0)] = 0x00fe001e;
+    dummy_regs[GPU_CONTROL_REG(TEXTURE_FEATURES_1)] = 0xffff;
+    dummy_regs[GPU_CONTROL_REG(TEXTURE_FEATURES_2)] = 0x9f81ffff;
+
+    dummy_regs[GPU_CONTROL_REG(THREAD_MAX_THREADS)] = 0x100;
+    dummy_regs[GPU_CONTROL_REG(THREAD_MAX_WORKGROUP_SIZE)] = 0x100;
+    dummy_regs[GPU_CONTROL_REG(THREAD_MAX_BARRIER_SIZE)] = 0x100;
+    dummy_regs[GPU_CONTROL_REG(THREAD_FEATURES)] = 0x0a040400;
+
+    dummy_regs[GPU_CONTROL_REG(SHADER_PRESENT_LO)] = 0xf; // 64 bit register, but only set low word
+    dummy_regs[GPU_CONTROL_REG(TILER_PRESENT_LO)] = 0x1; // 64 bit register, but only set low word
+    dummy_regs[GPU_CONTROL_REG(L2_PRESENT_LO)] = 0x1; // 64 bit register, but only set low word
+
+    return 0;
+}
+
+int gpu_device_create(struct kbase_device *kbdev) {
+    return kbase_gpu_device_create(kbdev);
+}
+
+void kbase_gpu_device_destroy(struct kbase_device *kbdex) {
+    clear_gpu();
+    return;
+}
+
+void gpu_device_destroy(struct kbase_device *kbdex) {
+    kbase_gpu_device_destroy(kbdex);
+    return;
+}
+
+unsigned int kbase_reg_read(struct kbase_device *kbdev, u32 offset)
+{
+    if (offset == GPU_CONTROL_REG(GPU_IRQ_STATUS)) {
+        return dummy_regs[offset] & dummy_regs[GPU_CONTROL_REG(GPU_IRQ_MASK)];
+    }
+    else if (offset == JOB_CONTROL_REG(JOB_IRQ_STATUS)) {
+        return dummy_regs[offset] & dummy_regs[JOB_CONTROL_REG(JOB_IRQ_MASK)];
+    }
+    else if (offset == MMU_REG(MMU_IRQ_STATUS)) {
+        return dummy_regs[offset] & dummy_regs[MMU_REG(MMU_IRQ_MASK)];
+    }
+
+    return dummy_regs[offset];
+}
+
+void kbase_reg_write(struct kbase_device *kbdev, u32 offset, u32 value) {
+    dummy_regs[offset] = value;
+
+    // just mark all jobs done successfully all the time
+    dummy_regs[JOB_SLOT_REG(0, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(1, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(2, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(3, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(4, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(5, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(6, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(7, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(8, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(9, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(10, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(11, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(12, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(13, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(14, JS_STATUS)] = 0;
+    dummy_regs[JOB_SLOT_REG(15, JS_STATUS)] = 0;
+}
+
+bool kbase_is_gpu_removed(struct kbase_device *kbdev)
+{
+    return 0;
+}
+
+void gpu_model_set_dummy_prfcnt_sample(unsigned int *data, unsigned int size)
+{
+    return;
+}
+
+void gpu_model_set_dummy_prfcnt_base_cpu(void *p)
+{
+    return;
+} 
+
+void kbase_synchronize_irqs(struct kbase_device *kbdev)
+{
+    return;
+}
+
+int kbase_install_interrupts(struct kbase_device *kbdev)
+{
+    return 0;
+}
+
+void kbase_release_interrupts(struct kbase_device *kbdev)
+{
+    return;
+}
+
+#endif /* KBASE_MODEL_DUMMY_H_ */
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_model_dummy.h b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_model_dummy.h
new file mode 100644
index 0000000..9f48e61
--- /dev/null
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_model_dummy.h
@@ -0,0 +1,38 @@
+#ifndef __MALI_KBASE_MODEL_DUMMY_H__
+#define __MALI_KBASE_MODEL_DUMMY_H__
+
+#include<mali_kbase.h>
+
+/*
+ * This file is strickly a hack to get the driver compiled and loaded in
+ * a paux linux kernel running in qemu.
+ */
+
+#define KBASE_DUMMY_MODEL_MAX_MEMSYS_BLOCKS 32
+#define KBASE_DUMMY_MODEL_MAX_SHADER_CORES 1
+
+
+void gpu_model_set_dummy_prfcnt_base_cpu(void *dump_va);
+int kbase_gpu_device_create(struct kbase_device *kbdev);
+void kbase_gpu_device_destroy(struct kbase_device *kbdex);
+int gpu_device_create(struct kbase_device *kbdev);
+void gpu_device_destroy(struct kbase_device *kbdex);
+void gpu_model_set_dummy_prfcnt_sample(unsigned int *data, unsigned int size);
+
+// hack taken from soc/samsung/cal-if/pwrcal.h
+struct dvfs_rate_volt {
+    unsigned long rate;
+    unsigned int volt;
+};
+
+unsigned int cal_dfs_get_lv_num(unsigned int id);
+
+int cal_dfs_get_rate_asv_table(unsigned int id,
+                    struct dvfs_rate_volt *table);
+
+unsigned long cal_dfs_get_rate(unsigned int id);
+
+
+unsigned long cal_dfs_set_rate(unsigned int id, unsigned long rate);
+
+#endif
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_pm_driver.c b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_pm_driver.c
index bcada93..468a474 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_pm_driver.c
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_pm_driver.c
@@ -2600,13 +2600,13 @@ static int kbase_pm_do_reset(struct kbase_device *kbdev)
 		dev_err(kbdev->dev, "Reset interrupt didn't reach CPU. Check interrupt assignments.\n");
 		/* If interrupts aren't working we can't continue. */
 		destroy_hrtimer_on_stack(&rtdata.timer);
-		return -EINVAL;
+		return 0;
 	}
 
 	if (kbase_is_gpu_removed(kbdev)) {
 		dev_dbg(kbdev->dev, "GPU has been removed, reset no longer needed.\n");
 		destroy_hrtimer_on_stack(&rtdata.timer);
-		return -EINVAL;
+		return 0;
 	}
 
 	/* The GPU doesn't seem to be responding to the reset so try a hard
@@ -2645,7 +2645,7 @@ static int kbase_pm_do_reset(struct kbase_device *kbdev)
 	}
 #endif /* CONFIG_MALI_ARBITER_SUPPORT */
 
-	return -EINVAL;
+	return 0;
 }
 
 int kbase_pm_protected_mode_enable(struct kbase_device *const kbdev)
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/device/backend/mali_kbase_device_jm.c b/driver/product/kernel/drivers/gpu/arm/midgard/device/backend/mali_kbase_device_jm.c
index 6a6ab60..00d4fc2 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/device/backend/mali_kbase_device_jm.c
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/device/backend/mali_kbase_device_jm.c
@@ -28,6 +28,10 @@
 #include <mali_kbase_ctx_sched.h>
 #include <mali_kbase_reset_gpu.h>
 
+#ifdef CONFIG_MALI_NO_MALI
+#include <mali_kbase_model_linux.h>
+#endif
+
 
 #ifdef CONFIG_MALI_ARBITER_SUPPORT
 #include <arbiter/mali_kbase_arbiter_pm.h>
@@ -156,8 +160,13 @@ static void kbase_device_hwcnt_backend_jm_term(struct kbase_device *kbdev)
 }
 
 static const struct kbase_device_init dev_init[] = {
+#ifdef CONFIG_MALI_NO_MALI
+    {kbase_gpu_device_create, kbase_gpu_device_destroy,
+            "Dummy model initialization failed"},
+#else
 	{ assign_irqs, NULL, "IRQ search failed" },
 	{ registers_map, registers_unmap, "Register map failed" },
+#endif
 	{ kbase_device_io_history_init, kbase_device_io_history_term,
 	  "Register access history initialization failed" },
 	{ kbase_device_pm_init, kbase_device_pm_term,
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/device/mali_kbase_device.c b/driver/product/kernel/drivers/gpu/arm/midgard/device/mali_kbase_device.c
index db11b76..ec21019 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/device/mali_kbase_device.c
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/device/mali_kbase_device.c
@@ -405,13 +405,14 @@ void kbase_device_vinstr_term(struct kbase_device *kbdev)
 
 int kbase_device_io_history_init(struct kbase_device *kbdev)
 {
-	return kbase_io_history_init(&kbdev->io_history,
-			KBASEP_DEFAULT_REGISTER_HISTORY_SIZE);
+	//return kbase_io_history_init(&kbdev->io_history,
+			//KBASEP_DEFAULT_REGISTER_HISTORY_SIZE);
+    return 0;
 }
 
 void kbase_device_io_history_term(struct kbase_device *kbdev)
 {
-	kbase_io_history_term(&kbdev->io_history);
+	//kbase_io_history_term(&kbdev->io_history);
 }
 
 int kbase_device_misc_register(struct kbase_device *kbdev)
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c b/driver/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
index e7fc41e..6238a64 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
@@ -4186,6 +4186,15 @@ void kbase_protected_mode_term(struct kbase_device *kbdev)
 	kfree(kbdev->protected_dev);
 }
 
+#ifdef CONFIG_MALI_NO_MALI
+static int kbase_common_reg_map(struct kbase_device *kbdev)
+{
+    return 0;
+}
+static void kbase_common_reg_unmap(struct kbase_device * const kbdev)
+{
+}
+#else /* CONFIG_MALI_NO_MALI */
 static int kbase_common_reg_map(struct kbase_device *kbdev)
 {
 	int err = 0;
@@ -4221,6 +4230,7 @@ static void kbase_common_reg_unmap(struct kbase_device * const kbdev)
 		kbdev->reg_size = 0;
 	}
 }
+#endif /* CONFIG_MALI_NO_MALI */
 
 int registers_map(struct kbase_device * const kbdev)
 {
@@ -4724,7 +4734,7 @@ int kbase_device_debugfs_init(struct kbase_device *kbdev)
 		goto out;
 	}
 
-	kbasep_regs_history_debugfs_init(kbdev);
+	//kbasep_regs_history_debugfs_init(kbdev);
 
 #if !MALI_USE_CSF
 	kbase_debug_job_fault_debugfs_init(kbdev);
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/mali_kbase_model_linux.h b/driver/product/kernel/drivers/gpu/arm/midgard/mali_kbase_model_linux.h
new file mode 100644
index 0000000..7761d5a
--- /dev/null
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/mali_kbase_model_linux.h
@@ -0,0 +1,10 @@
+
+#ifndef _BASE_MODEL_LINUX_H_
+#define _BASE_MODEL_LINUX_H_
+
+int kbase_gpu_device_create(struct kbase_device *kbdev);
+void kbase_gpu_device_destroy(struct kbase_device *kbdex);
+int gpu_device_create(struct kbase_device *kbdev);
+void gpu_device_destroy(struct kbase_device *kbdex);
+
+#endif
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_config_devicetree.c b/driver/product/kernel/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_config_devicetree.c
index 61ef697..647ae8f 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_config_devicetree.c
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_config_devicetree.c
@@ -1,7 +1,7 @@
-// SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+// SPDX-License-Identifier: GPL-2.0
 /*
  *
- * (C) COPYRIGHT 2015, 2017, 2020-2021 ARM Limited. All rights reserved.
+ * (C) COPYRIGHT 2015, 2017, 2020 ARM Limited. All rights reserved.
  *
  * This program is free software and is provided to you under the terms of the
  * GNU General Public License version 2 as published by the Free Software
@@ -19,35 +19,17 @@
  *
  */
 
-#include <mali_kbase.h>
 #include <mali_kbase_config.h>
-#include <backend/gpu/mali_kbase_pm_internal.h>
 
 static struct kbase_platform_config dummy_platform_config;
+#ifndef CONFIG_OF
+struct kbase_io_resources dummy_io_resources;
+#endif
 
 struct kbase_platform_config *kbase_get_platform_config(void)
 {
-	return &dummy_platform_config;
-}
-
 #ifndef CONFIG_OF
-int kbase_platform_register(void)
-{
-	return 0;
-}
-
-void kbase_platform_unregister(void)
-{
-}
+    dummy_platform_config.io_resources = &dummy_io_resources;
 #endif
-
-#ifdef CONFIG_MALI_MIDGARD_DVFS
-#if MALI_USE_CSF
-int kbase_platform_dvfs_event(struct kbase_device *kbdev, u32 utilisation)
-#else
-int kbase_platform_dvfs_event(struct kbase_device *kbdev, u32 utilisation, u32 util_gl_share, u32 util_cl_share[2])
-#endif
-{
-	return 1;
+	return &dummy_platform_config;
 }
-#endif /* CONFIG_MALI_MIDGARD_DVFS */
diff --git a/driver/product/kernel/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_config_platform.c b/driver/product/kernel/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_config_platform.c
index 63aa33f..ab240f7 100644
--- a/driver/product/kernel/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_config_platform.c
+++ b/driver/product/kernel/drivers/gpu/arm/midgard/platform/devicetree/mali_kbase_config_platform.c
@@ -33,7 +33,7 @@
 #include <linux/wait.h>
 #include <linux/delay.h>
 #include <linux/gcd.h>
-#include <asm/arch_timer.h>
+//#include <asm/arch_timer.h>
 
 struct kbase_platform_funcs_conf platform_funcs = {
 	.platform_init_func = NULL,
